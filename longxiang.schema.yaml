# Rime schema
# encoding: utf-8
# 方案说明
schema:
  schema_id: longxiang
  name: 龙象般若
  version: "2024-09-05"
  author:
    - 玄天之龙
  description: |
    万象拼音白霜词库，自然龙音码加墨奇形辅码，简称龙象
  dependencies:
    - melt_eng        # 英文输入，作为次翻译器挂载到拼音方案
    - tiger

# 开关
# reset: 默认状态。注释掉后，切换窗口时不会重置到默认状态。
# states: 方案选单显示的名称。可以注释掉，仍可以通过快捷键切换。
# abbrev: 默认的缩写取 states 的第一个字符，abbrev 可自定义一个字符
switches:
  - name: ascii_mode
    states: [ 中, 英 ]
  - name: ascii_punct  # 中英标点
    states: [ ¥, $ ]
    reset: 1
  - name: emoji
    states: [ :|, ;) ]
  - name: full_shape
    states: [ 半, 全 ]
  - name: pinyinhint
    states: [ 隐, 拼 ]
  - name: moqi_chaifen
    states: [ 奇, 墨 ]
    reset: 1
  - name: traditionalization
    states: [ 简, 繁 ]

<<<<<<< HEAD
pro_comment_format:           # 超级注释模块，子项配置 true 开启，false 关闭
  candidate_length: 3         # 候选词辅助码提醒的生效长度，0为关闭  但同时清空其它，应当使用上面开关来处理    
  fuzhu_type: moqi
  corrector: true              # 启用错音错词提醒，例如输入 geiyu 给予 获得 jǐ yǔ 提示
  corrector_type: "{comment}"  # 换一种显示类型，比如"({comment})" 
=======
# pro_comment_format:           # 超级注释模块，子项配置 true 开启，false 关闭
#   candidate_length: 1         # 候选词辅助码提醒的生效长度，0为关闭  但同时清空其它，应当使用上面开关来处理    
#   fuzhu_type: moqi
#   corrector: true              # 启用错音错词提醒，例如输入 geiyu 给予 获得 jǐ yǔ 提示
#   corrector_type: "{comment}"  # 换一种显示类型，比如"({comment})" 
>>>>>>> 3d6d9fd7291373e08a702f2d9cc601fe1a763085

# 输入引擎
engine:
  processors:
#    - lua_processor@select_character          # 以词定字，有了辅助码了，想开启可以注释掉
    - lua_processor@*cold_word_drop.processor
    - ascii_composer
    - recognizer
    - key_binder
    - lua_processor@*key_binder # 绑定按键扩展能力
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - script_translator
    - lua_translator@*date_translator    # 时间、日期、星期
    - lua_translator@*lunar              # 农历
    - lua_translator@*unicode            # Unicode
    - lua_translator@*number_translator  # 数字、金额大写
    - lua_translator@*calculator        # 计算器
    - table_translator@custom_phrase    # 自定义短语 custom_phrase.txt
    - table_translator@melt_eng         # 英文输入
    - table_translator@cn_en            # 中英混合词汇
    - table_translator@chengyu            # 简码成语
    - lua_translator@*force_gc          # 暴力 GC 降低内存
  filters:
    - lua_filter@*cold_word_drop.filter
    - reverse_lookup_translator@reverse_tiger
    - lua_filter@*long_word_filter                  #长词优先      
    - lua_filter@*autocap_filter                    # 英文自动大写
    - lua_filter@*pin_cand_filter                   # 置顶候选项（顺序要求：置顶候选项 > Emoji > 简繁切换）
    - lua_filter@*reduce_english_filter             # 降低部分英语单词在候选项的位置
    - simplifier@emoji                              # Emoji
    - simplifier@traditionalize                     # 简繁切换
    - simplifier@mars                               #火星文
    - simplifier@chinese_english                    #中英翻译
    - simplifier@moqi_chaifen
    - simplifier@pinyinhint
    - lua_filter@*is_in_user_dict                   # 根据是否在用户词典，在结尾加上一个星号 *
#    - lua_filter@*cn_en_spacer                     #启用时中英混输为中英混输词条（cn_en.dict.yaml）自动增加空格，示例：`VIP中P` → `VIP 中 P`              
#    - lua_filter@*en_spacer                         #启用时中文状态下输入英文单词后面自动追加空格
    - lua_filter@*pro_comment_format                #超级注释模块，支持简码前置、错词提示、辅助码显示，支持个性化配置和关闭相应的功能，详情搜索pro_comment_format进行详细配置
#    - lua_filter@*pro_comment_format                #超级注释模块，支持简码前置、错词提示、辅助码显示，支持个性化配置和关闭相应的功能，详情搜索pro_comment_format进行详细配置
    - uniquifier                                    # 去重


# Lua 配置: 日期、时间、星期、ISO 8601、时间戳的触发关键字
date_translator:
  date: date            # 日期： 2022-11-29
  time: time            # 时间： 18:13
  week: week            # 星期： 星期二
  datetime: datetime    # ISO 8601： 2022-11-29T18:13:11+08:00
  timestamp: timestamp  # 时间戳： 1669716794

# Lua 配置：农历的触发关键字
lunar: lunar  # 农历： 二〇二三年冬月二十 癸卯年（兔）冬月二十

# Lua 配置：计算器触发关键字
calculator:
  trigger: "V"

# Lua 配置: 置顶候选项
# 注释太长了，请参考 pin_cand_filter.lua 开头的说明书。
pin_cand_filter:
  # 格式：编码<Tab>字词1<Space>字词2……
  - d	的

#Lua 配置:长词优先
long_word_filter:
  count: 4
  idx: 3

# Lua 配置: 降低部分英语单词在候选项的位置。
# 详细介绍 https://dvel.me/posts/make-rime-en-better/#短单词置顶的问题
# 正常情况： 输入 rug 得到 「1.rug 2.如果 …… 」
# 降低之后： 输入 rug 得到 「1.如果 2.rug …… 」
# 几种模式：
# all     降低脚本内置的单词（所有 3~4 位长度、前 2~3 位是完整拼音、最后一位是声母），words 作为自定义的额外补充
# custom  完全自定义，只降低 words 里的
# none    不降低任何单词，相当于没有启用这个 Lua
# （匹配的是编码，不是单词）
reduce_english_filter:
  mode: custom  # all | custom | none
  idx: 2        # 降低到第 idx 个位置
  # 自定义的单词列表，示例列表没有降低部分常用单词，如 and cat mail Mac but bad shit ……
  words: [
    aid, ann,
    bail, bait, bam, band, bans, bat, bay, bend, bent, benz, bib, bid, bien, biz, boc, bop, bos, bud, buf, bach, bench, bush,
    cab, cad, cain, cam, cans, cap, cas, cef, chad, chan, chap, chef, cher, chew, chic, chin, chip, chit, coup, cum, cunt, cur, couch,
    dab, dag, dal, dam, dent, dew, dial, diet, dim, din, dip, dis, dit, doug, dub, dug, dunn,
    fab, fax, fob, fog, foul, fur,
    gag, gail, gain, gal, gam, gaol, ged, gel, ger, guam, gus, gut,
    hail, ham, hank, hans, hat, hay, heil, heir, hem, hep, hud, hum, hung, hunk, hut, hush,
    jim, jug,
    kat,
    lab, lad, lag, laid, lam, laos, lap, lat, lax, lay, led, leg, lex, liam, lib, lid, lied, lien, lies, linn, lip, lit, liz, lob, lug, lund, lung, lux, lash, loch, lush,
    mag, maid, mann, mar, mat, med, mel, mend, mens, ment, mil, mins, mint, mob, moc, mop, mos, mot, mud, mug, mum, mesh,
    nap, nat, nay, neil, nib, nip, noun, nous, nun, nut, nail, nash,
    pac, paid, pail, pain, pair, pak, pal, pam, pans, pant, pap, par, pat, paw, pax, pens, pic, pier, pies, pins, pint, pit, pix, pod, pop, pos, pot, pour, pow, pub, pinch, pouch,
    rand, rant, rent, rep, res, ret, rex, rib, rid, rig, rim, rub, rug, rum, runc, runs, ranch,
    sac, sail, sal, sam, sans, sap, saw, sax, sew, sham, shaw, shin, sig, sin, sip, sis, suit, sung, suns, sup, sur, sus,
    tad, tail, taj, tar, tax, tec, ted, tel, ter, tex, tic, tied, tier, ties, tim, tin, tit, tour, tout, tum,
    wag, wand, womens, wap, wax, weir, won,
    yan, yen,
    zach
  ]


# 主翻译器，拼音
translator:
  dictionary: longxiang          # 挂载词库 longxiang.dict.yaml
  prism: longxiang          # 多方案共用一个词库时，为避免冲突，需要用 prism 指定一个名字。
  contextual_suggestions: true   #上下文建议开启〔需配合 grammar 使用〕
  max_homophones: 4 # 最大同音簇长度〔需配合 grammar 使用〕
  max_homographs: 2 # 最大同形簇长度〔需配合 grammar 使用〕
  dynamic_model: true  # 启用动态语言模型
  segment_length: 4  # 设置分词长度
  prioritize_quality: true  # 启用优先质量选项
  max_phrase_length: 7  # 设置短语的最大长度，如果主要输入单词或短短的短语，可以设置为4。句子更长一些
  enable_completion: true  # 启用候选词补全
  max_candidates: 10  # 设置最大候选词数量
#  punctuation_model: default  # 设置标点符号模型
#  single_char_first: true  # 优先显示单个字符
#  candidate_filter: "^(?!abc).*$"  # 过滤掉包含 "abc" 的候选词
  user_dict: longxiang.userdb  # 用户词典的文件名称
  db_class: tabledb  #开启后就不会产生longxiang.userdb这样的文件夹，会直接输出文本longxiang.txt同时无法使用同步能力
  enable_user_dict: true # 是否开启自动调频
  encode_commit_history: true   # 预留历史上屏自动编码成词
  initial_quality: 3       # 初始质量拼音的权重应该比英文大
#  secondary_quality: 0.8  # 设置次要质量
  spelling_hints: 10             # 将注释以词典字符串形式完全暴露，通过pro_comment_format.lua完全接管，灵活配置。
  always_show_comments: true    # Rime 默认在 preedit 等于 comment 时取消显示 comment，这里强制一直显示，供pro_comment_format.lua做判断用。
  comment_format: {comment}  #将注释以词典字符串形式完全暴露，通过pro_comment_format.lua完全接管，灵活配置。
  preedit_format:               # preedit_format 影响到输入框的显示和“Shift+回车”上屏的字符
    - xform/([a-z][a-z][a-z][a-z])o/$1°/
#    - xform/([a-z][a-z][a-z][a-z])o/$1°/

reverse_tiger:
  dictionary: tiger
  db_class: stabledb
  tag: reverse_tiger
  enable_completion: true
  prism: tiger
  prefix: "!"
  suffix: "'"
  tips: "虎>龙"

reverse_lookup:
  extra_tags:
    - reverse_tiger

# 自定义短语
custom_phrase:
  dictionary: ""
  user_dict: custom_phrase  # 需要手动创建 custom_phrase.txt 文件
  db_class: stabledb
  enable_completion: false # 补全提示
  enable_sentence: false   # 禁止造句
  initial_quality: 99      # custom_phrase 的权重应该比 pinyin 和 melt_eng 大

# 简码词库导入位于jm_dicts得txt文件词库
chengyu:
  dictionary: ""
  user_dict: jm_dicts/chengyu
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: 1.2 #本表词和系统词重码居后


# 次翻译器，英文
melt_eng:
  dictionary: melt_eng     # 挂载词库 melt_eng.dict.yaml
  db_class: stabledb
  enable_sentence: false   # 禁止造句
  enable_user_dict: false  # 禁用用户词典，是否开启自动调频
  initial_quality: 1.1     # 初始权重
  comment_format:          # 自定义提示码
    - xform/.*//           # 清空提示码


# 中英混合词汇
cn_en:
  dictionary: ""
  user_dict: en_dicts/cn_en_double_pinyin
  db_class: stabledb
  enable_completion: true
  enable_sentence: false
  initial_quality: 0.5
  comment_format:
    - xform/^.+$//

# Emoji
emoji:
  option_name: emoji
  opencc_config: emoji.json
  inherit_comment: false  # 在 corrector.lua 及反查中，emoji 返回空注释

# 火星文切换
mars:
  opencc_config: martian.json 
  option_name: mars

#中文转英文
chinese_english:
  option_name: chinese_english
  opencc_config: chinese_english.json
  tips: char
  comment_format:
    - "xform/-/ /"

# 显示墨奇码拆分
moqi_chaifen:
  option_name: moqi_chaifen
  opencc_config: moqi_chaifen.json
  tips: char
  show_in_comment: true
  comment_format:
    - "xform/	/ /"

pinyinhint:
  option_name: pinyinhint
  opencc_config: pinyinhint.json
  tips: char
  show_in_comment: true

# 简繁切换
traditionalize:
  option_name: traditionalization
  opencc_config: s2t.json  # s2t.json | s2hk.json | s2tw.json | s2twp.json
  tips: none               # 转换提示: all 都显示 | char 仅单字显示 | none 不显示。
  tags: [ abc, number, gregorian_to_lunar ]  # 限制在对应 tag，不对其他如反查的内容做简繁转换


# 标点符号
# punctuator 下面有三个子项：
#   full_shape 全角标点映射
#   half_shape 半角标点映射
#   symbols    Rime 的预设配置是以 '/' 前缀开头输出一系列字符，自定义的 symbols.yaml 修改成了 'V' 开头。
punctuator:
  full_shape:
    __include: default:/punctuator/full_shape  # 从 default.yaml 导入配置
  half_shape:
    __include: default:/punctuator/half_shape  # 从 default.yaml 导入配置
  symbols:
    __include: symbols:/symbols         # 从 symbols.yaml 导入配置

# 从 default 继承快捷键
key_binder:
  import_preset: default  # 从 default.yaml 继承通用的
  search: "`"             # 辅码引导符，要添加到 speller/alphabet
  bindings:             # 也可以再增加方案专有的
    #- { when: composing, accept: Tab, send: '[' } ## 取消注释后：tab引导辅助码
    - { when: composing, accept: Control+m, send: Return }
    - { when: composing, accept: Control+w, send: Control+BackSpace }
#分号用于次选
    - { when: has_menu, accept: semicolon, send: 2 }
#    - { when: has_menu, accept: comma, send: 3 }
#使用Control+e进入翻译模式
    - { when: has_menu, accept: "Control+e", toggle: chinese_english}
    - { when: has_menu, accept: "Control+p", toggle: moqi_chaifen }
#使用快捷键Control+q开启和关闭辅助码显示，使用快捷键Control+p启用增强（外挂）辅助码显示
    - { when: has_menu, accept: "Control+q", toggle: fuzhu_switch }
#    - { when: composing, accept: "Control+o", toggle: "fuzhu_type_switch" }
# 使用 tab 在不同音节之间跳转
    - { when: has_menu, accept: "Tab", send: "Control+Right" }
    - { when: composing, accept: "Tab", send: "Control+Right" }
#通过stick.lua显示到注释里，用来上屏带/的简码词汇。最好是用句号，这样可以与手机上可以做同样的定义，保持同样的习惯
    - { match: "[a-z]{1,3}", accept: ".",  send_sequence: "/1" } 
    # - { when: composing, match: "[a-z]{2}", accept: Tab, send: '|' }

# 拼写设定
speller:
# table_translator翻译器，支持自动上屏。例如 “zmhu”可以自动上屏“怎么回事”
#  auto_select: true
#  auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}|;[a-z]
#  auto_select_pattern: ^;(\w+|;)
  # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射
  alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA`/
  # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
  initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA/
  delimiter: " '"  # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
  algebra:
    - derive|^(.+)[[](\w)(\w)$|$1| # 纯双拼的情况
    - derive|^(.+)[[](\w)(\w)$|$1$2| # 双拼+一位辅助码的情况
    - derive|^(.+)[[](\w)(\w)$|$1[$2| # 双拼+[一位辅助码的情况
    - abbrev|^(.+)[[](\w)(\w)$|$1$2$3| # 双拼+2位辅助码的情况，abbrev类型不可以整句内输入2位辅助码，必须加o或/
    - derive|^(.+)[[](\w)(\w)$|$1$2$3o| # 整句模式下，输入syffo 出单字 增强单字性能
    - derive|^(.+)[[](\w)(\w)$|$1$2$3/| # 整句模式下，输入syff/ 出单字 增强单字性能
    # - derive/[[]// ## 取消注释后：直接引导2位辅助码；否则只能引导1位辅助码或者2位辅助码加/

# 处理符合特定规则的输入码，如网址、反查
recognizer:
  import_preset: default  # 从 default.yaml 继承通用的
  patterns:  # 再增加方案专有的：
    reverse_tiger: "^![a-z]*'?$"
    punct: "^/([0-9]|10|[A-Za-z]+)$"    # 响应 symbols.yaml 的 symbols
    unicode: "^U[a-f0-9]+"              # 脚本将自动获取第 2 个字符 U 作为触发前缀，响应 lua_translator@unicode，输出 Unicode 字符
    number: "^R[0-9]+[.]?[0-9]*"        # 脚本将自动获取第 2 个字符 R 作为触发前缀，响应 lua_translator@number_translator，数字金额大写
    gregorian_to_lunar: "^N[0-9]{1,8}"  # 脚本将自动获取第 2 个字符 N 作为触发前缀，响应 lua_translator@lunar，公历转农历，输入 N20240115 得到「二〇二三年腊月初五」
    calculator: "^V.*$"                 #计算器功能引导

#语言模型
octagram:
  enable_for_sentence:
      grammar:
        # language: fcitx-zh-hans # 小企鹅模型
        # language: zh-hans-t-huayu-v7-bgw # 华宇模型
        # language: zh-hans-wiki-202405 # 维基模型
        language: zh-hans-t-essay-bgw # rime官方模型
        # language: zhs-moqi # 墨奇训练的模型 聊胜于无
        collocation_max_length: 4
        collocation_min_length: 2
        non_collocation_penalty: -24
        collocation_penalty: -6
        weak_collocation_penalty: -12
        rear_penalty: -18
<<<<<<< HEAD
=======
      translator/contextual_suggestions: true # 是否使用语言模型优化输出结果〔需配合 grammar 使用〕
      translator/max_homophones: 4 # 最大同音簇长度〔需配合 grammar 使用〕
      translator/max_homographs: 2 # 最大同形簇长度〔需配合 grammar 使用〕
      translator/dynamic_model: true  # 启用动态语言模型
      translator/segment_length: 4  # 设置分词长度
      translator/prioritize_quality: true  # 启用优先质量选项
      translator/max_phrase_length: 7  # 设置短语的最大长度，如果主要输入单词或短短的短语，可以设置为4。句子更长一些
      translator/enable_completion: true  # 启用候选词补全
      translator/max_candidates: 10  # 设置最大候选词数量
>>>>>>> 3d6d9fd7291373e08a702f2d9cc601fe1a763085
